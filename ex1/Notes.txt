1. before tank move, we need to check if its in backward delay.
2. positionMap in GameManager for collisions: {(0,1):[Tank1, Shell2],(5,4):[Shell2],(9,4):[Tank2,Shell4]}
3. Sets of Tank pointers and Shell pointers in Board.
4. GameManager.LoadGame() creates the positionMap.
5. No problem for double pointers as long as we make sure to delete them both when needed.
 REAL JOB:
6. move includes to headers
7. cleanup()
8. update Shoot() so that the new shell is one cell away from me (I'm a Tank :) )
9. General Tank algorithm:
mines dist 1 from me
a function which gets the positionMap after move shells - and checks whether there are shells dist 1 from me or in the shell's move direction (shadow).
10. Basic Tank Algorithm:
check whether i need to run for my life (if i cant because of my direction - dont move)Microsoft.QuickAction.AirplaneMode
shoot (if i close enough)
11. Chasing Tank Algorithm:
if im not basic - run BFS or A* but without restricted cells, which i get from General Tank Algoooo.
12. check if we can rebuild position map fewer times.
13. can we shorten an object complex type?
14. טיפול שגיאה של טנק שמגיע בטעות לקיר מהיבט הגיים מנג'ר וכן מהטנק אלגוריתם
15. האם להתחשב בטילים שמתפוצצים בדרך אז אין צורך לברוח?
